// Generated by CoffeeScript 1.3.1
(function() {
  var INVERTED_REGEX, NORMALIZED, NOTES, SCALES, TONE_REGEX, Transposer, l, s, _i, _len, _ref;

  NOTES = ['A', ['B♭', 'A♯'], 'B', 'C', ['D♭', 'C♯'], 'D', ['E♭', 'D♯'], 'E', 'F', ['G♭', 'F♯'], 'G', ['A♭', 'G♯']];

  NORMALIZED = ['I', '♯I', 'II', '♭III', 'III', 'IV', '♯IV', 'V', '♭VI', 'VI', '♭VII', 'VII'];

  SCALES = {
    'A': ['A', 'A♯', 'B', 'C', 'C♯', 'D', 'D♯', 'E', 'F', 'F♯', 'G', 'G♯'],
    'B♭': ['B♭', 'B', 'C', 'D♭', 'D', 'E♭', 'E', 'F', 'G♭', 'G', 'A♭', 'A'],
    'B': ['B', 'C', 'C♯', 'D', 'D♯', 'E', 'F', 'F♯', 'G', 'G♯', 'A', 'A♯'],
    'C': ['C', 'C♯', 'D', 'E♭', 'E', 'F', 'F♯', 'G', 'A♭', 'A', 'B♭', 'B'],
    'D♭': ['D♭', 'D', 'E♭', 'E', 'F', 'G♭', 'G', 'A♭', 'A', 'B♭', 'B', 'C'],
    'D': ['D', 'D♯', 'E', 'F', 'F♯', 'G', 'G♯', 'A', 'B♭', 'B', 'C', 'C♯'],
    'E♭': ['E♭', 'E', 'F', 'G♭', 'G', 'A♭', 'A', 'B♭', 'B', 'C', 'D♭', 'D'],
    'E': ['E', 'F', 'F♯', 'G', 'G♯', 'A', 'A♯', 'B', 'C', 'C♯', 'D', 'D♯'],
    'F': ['F', 'F♯', 'G', 'A♭', 'A', 'B♭', 'B', 'C', 'D♭', 'D', 'E♭', 'E'],
    'F♯': ['F♯', 'G', 'G♯', 'A', 'A♯', 'B', 'C', 'C♯', 'D', 'D♯', 'E', 'F'],
    'G': ['G', 'G♯', 'A', 'B♭', 'B', 'C', 'C♯', 'D', 'D♯', 'E', 'F', 'F♯'],
    'A♭': ['A♭', 'A', 'B♭', 'B', 'C', 'D♭', 'D', 'E♭', 'E', 'F', 'G♭', 'G']
  };

  _ref = ['B', 'D', 'E', 'A'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    l = _ref[_i];
    SCALES["" + l + "b"] = SCALES["" + l + "♭"];
  }

  SCALES['F#'] = SCALES['F♯'];

  for (l in SCALES) {
    s = SCALES[l];
    SCALES["" + l + "m"] = s;
  }

  INVERTED_REGEX = /(\/\s*)([A-G][#♯b♭]?)\s*$/;

  TONE_REGEX = /^[A-G][#♯b♭]?/;

  (typeof window !== "undefined" && window !== null ? window : exports).Transposer = Transposer = (function() {

    Transposer.name = 'Transposer';

    function Transposer(from, to) {
      this.from = from;
      this.to = to;
      if (this.from) {
        this.tone = this.from.replace(/^([A-G][#♯b♭]?).*/, '$1');
      }
      if (this.to) {
        this.toScale = SCALES[this.to];
      }
    }

    Transposer.prototype.absoluteIdx = function(chord) {
      var accident, idx, letter, _ref1;
      _ref1 = chord.slice(0, 2), letter = _ref1[0], accident = _ref1[1];
      idx = NOTES.indexOf(letter);
      if (accident === '#' || accident === '♯') {
        idx += 1;
      }
      if (accident === 'b' || accident === '♭') {
        idx -= 1;
      }
      if (idx === -1) {
        idx = 11;
      }
      return idx;
    };

    Transposer.prototype.relativeIdx = function(chord) {
      var idx;
      idx = this.absoluteIdx(chord) - this.absoluteIdx(this.tone);
      if (idx < 0) {
        idx += 12;
      }
      return idx;
    };

    Transposer.prototype.normalize = function(chord) {
      var _this = this;
      chord = chord.replace(TONE_REGEX, NORMALIZED[this.relativeIdx(chord)]);
      return chord.replace(INVERTED_REGEX, function(_, prefix, inversion) {
        return prefix + _this.normalize(inversion);
      });
    };

    Transposer.prototype.transpose = function(chord) {
      var remaining,
        _this = this;
      remaining = chord.replace(TONE_REGEX, '');
      remaining = remaining.replace(INVERTED_REGEX, function(_, prefix, inversion) {
        return prefix + _this.transpose(inversion);
      });
      return this.toScale[this.relativeIdx(chord)] + remaining;
    };

    return Transposer;

  })();

}).call(this);
